# Name of the workflow
name: Build

# Controls what will trigger the workflow.
# Change it if you need.
on:
  # A new push to the “main” branch.
  push:
    branches: [ "main" ]
  # A new pull request to the “main” branch.
  pull_request:
    branches: [ "main" ]
  # Allows to trigger the workflow from GitHub interfaces.
  workflow_dispatch:

# A single workflow can have multiple jobs.
jobs:
  # ‘A new job is defined with the name: “build Android”
  build_android:
    # Defines what operating system will be used for the actions.
    # For android, we will use linux GitHub-Hosted Runner.
    runs-on: ubuntu-22.04
    # Defines what step should be passed for successful run
    steps:
      # Checkout to the selected branch
      - uses: actions/checkout@v3
      # Download and install java
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "11.0"
          cache: 'gradle'
      # Download and install flutter packages
      - uses: subosito/flutter-action@v2
        with:
          # Define which stable flutter version should be used
          flutter-version: "3.3.10"
          channel: 'stable'
          cache: true
      # Get Flutter project dependencies
      - name: Get dependencies
        run: flutter pub get
      # Build Android App Bundle
      - name: Start release build
        run: flutter build appbundle
      # Sign the app bundle
	    - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: build/app/outputs/bundle/westRelease/
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE_FILE_BASE64 }}
          alias: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
      # Upload the app bundle to Play Store 
	    - name: Upload app bundle to Play Store
        uses: r0adkll/upload-google-play@v1.0.18
        with:
          serviceAccountJsonPlainText: ${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}
          packageName: com.pingnpay.flutterapp
          releaseFiles: ${{steps.sign_app.outputs.signedReleaseFile}}
          mappingFile: build/app/outputs/mapping/release/mapping.txt
          track: internal
  build_iOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Import certificates (iOS)
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.iOS_P12_DISTRIBUTION_CERT_BASE64 }}
        P12_PASSWORD: ${{ secrets.iOS_P12_DISTRIBUTION_CERT_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PNPD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.iOS_KEYCHAIN_PASSWORD }}
      run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    # - name: Decode App Store Connect private key file and save it
    #   env:
    #     API_KEY_BASE64: ${{ secrets.iOS_APPSTORE_CONNECT_PRIVATE_KEY_BASE64 }}
    #     API_KEY: ${{ secrets.iOS_APPSTORE_CONNECT_API_KEY_ID }}
    #   run: |
    #     mkdir -p ~/private_keys
    #     ls ~/private_keys
    #     echo -n "$API_KEY_BASE64" | base64 --decode -o ~/private_keys/AuthKey_$API_KEY.p8
    #     echo "After saving: "
    #     ls ~/private_keys
        
    # - name: Get flutter packages
    #   uses: subosito/flutter-action@v2
    #   with:
    #     channel: 'stable'
    #     flutter-version: '3.3.9'
    #     architecture: x64
    # - run: flutter pub get
    # - run: flutter build ipa --flavor pnpd --release --export-options-plist=ios/exportOptionsPnpd.plist --dart-define=FLAVOR=pnpd --dart-define=ANDROID_BUNDLE_ID=com.pingnpay-pnpd.flutterapp --dart-define=IOS_BUNDLE_IDENTIFIER=com.pingnpay-pnpd.flutterapp --dart-define=APP_NAME="pingNpay Pnpd" --dart-define=IOS_PROVISION_PROFILE_NAME="pnpd pingNpay"
  
    # - name: Upload to App Store Connect
    #   env:
    #     ISSUER_ID: ${{ secrets.IOS_APPSTORE_CONNECT_ISSUER_ID }}
    #     API_KEY: ${{ secrets.IOS_APPSTORE_CONNECT_API_KEY_ID }}
    #   run: |
    #     echo "Before uploading: "
    #     ls ~/private_keys
    #     # xcrun altool --validate-app -f build/ios/ipa/flutter_pingnpay.ipa -t ios -apiKey 5P7DDKTNF2 -apiIssuer "3c2fe270-9f20-479f-9e4c-ae608bcf9534"
    #     xcrun altool --upload-app -f build/ios/ipa/flutter_pingnpay.ipa -t ios --apiKey $API_KEY --apiIssuer "$ISSUER_ID"
    #     ls ~/private_keys

    # - name: Clean up keychain and provisioning profile
    #   if: ${{ always() }}
    #   run: |
    #      security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
    #      rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
